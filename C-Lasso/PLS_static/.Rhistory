1:10
x = rnorm(100)
x
y = rnorm(100)
corr(x,y)
cor(x,y)
rep(mean(y),100)
y_1 <-rep(mean(y),100)
cor(x,y_1)
y_1
x
cor(x,y_1)
cor(1,2)
x = 1
y = 2
cor(x,y)
x <- (1:100)*0.2
y <- (1:100)*0.8
cor(x,y)
library("nloptr")
eval_f <- function(x) {
return( 100 * (x[2] - x[1] * x[1])^2 + (1 - x[1])^2 )
}
x0 <- c( -1.2, 1 )
res <- nloptr( x0=x0,
eval_f=eval_f )
res <- nloptr( x0=x0,
eval_f=eval_f,
opts=opts)
opts <- list("algorithm"="NLOPT_LD_LBFGS",
"xtol_rel"=1.0e-8)
res <- nloptr( x0=x0,
eval_f=eval_f,
opts=opts)
t <- Sys.time()
t
t <- Sys.time()
t
a = Sys.time()
b = Sys.time()
t = b -a
rep(t,100)
t
class(t)
A <- matrix(1:200,100,2)
A
apply(A, 1, rep)
size( apply(A, 1, rep) )
dim( apply(A, 1, rep) )
sum(matrix(1:100,100,1))
matrix(1:8,4,2)
matrix( t( matrix(1:8,4,2) ), 8, 1)
a <- c(4,3,2)
a <- c(4,8,11)
apply(a, sum)
N <- 200; TT <- 40;
library("Rmosek")
library("SparseM")
library("Matrix")
source("DGP_static.R")
source("mlasso_est.R")
source("tools_func.R")
N <- 200; TT <- 40;
p <- 2; N.cut <- c(0.3,0.6,1);
K <- length(N.cut); a0 <- matrix(c(0.4, 1.6, 1,1, 1.6, 0.4), nrow = p);
d <- DGP.static(N, TT, p, N.cut, a0)
y <- d$y
X <- d$X
t <- 100;
beta = c(rep(0,4), rep(1,4))
t <- 100;
p = 8;
beta <- c( rep(1,4), rep(0,4) );
rho = 0.5;
sigma <- matrix(rho, p, p); diag(sigma) <- 1;
X <- mvrnorm( n = t, mu = 0, Sigma = sigma);
e <- rnorm( t, 0, 1);
Y <- X %*% beta + e;
help("rnorm")
library("MASS")
t <- 100;
p = 8;
beta <- c( rep(1,4), rep(0,4) );
rho = 0.5;
sigma <- matrix(rho, p, p); diag(sigma) <- 1;
X <- mvrnorm( n = t, mu = 0, Sigma = sigma);
e <- rnorm( t, 0, 1);
Y <- X %*% beta + e;
t <- 100;
p = 8;
beta <- c( rep(1,4), rep(0,4) );
rho = 0.5;
sigma <- matrix(rho, p, p); diag(sigma) <- 1;
X <- mvrnorm( n = t, mu = 0, Sigma = sigma);
e <- rnorm( t, 0, 1);
Y <- X %*% beta + e;
t <- 100;
p = 8;
beta <- c( rep(1,4), rep(0,4) );
rho = 0.5;
sigma <- matrix(rho, p, p); diag(sigma) <- 1;
X <- mvrnorm( n = t, mu = rep(0,p), Sigma = sigma);
e <- rnorm( t, 0, 1);
Y <- X %*% beta + e;
Y
grad <- function(X, y, b){
return( - t(X) %*% ( y - X%*%b ) )
}
source('C:/Users/Zhan/Dropbox/Research/L0 regularization/Simulation/warm_start.R')
library(MASS)
t = 100
p = 50
data <- dgp(t,p)
b.init <- rep(0,p);
b.init[ sample(1:8,4) ] <- 1;
dfo.algo(data, b.init, 4 )
b.init
library(MASS)
t = 100
p = 50
data <- dgp(t,p)
b.init <- rep(0,p);
b.init[ sample(1:8,4) ] <- 1;
dfo.algo(data, b.init, 4 )
b.init
library(MASS)
t = 100
p = 50
data <- dgp(t,p)
b.init <- rep(0,p);
b.init[ sample(1:p,4) ] <- 1;
dfo.algo(data, b.init, 4 )
source('C:/Users/Zhan/Dropbox/Research/L0 regularization/Simulation/warm_start.R')
library(MASS)
t = 100
p = 50
data <- dgp(t,p)
b.init <- rep(0,p);
b.init[ sample(1:p,4) ] <- 1;
dfo.algo(data, b.init, 4 )
b.init
source('C:/Users/Zhan/Dropbox/Research/L0 regularization/Simulation/discrete-first-order-algo.R')
library(MASS)
t = 100
p = 1000
data <- dgp(t,p)
b.init <- rep(0,p);
b.init[ sample(1:p,4) ] <- 1;
library(MASS)
t = 100
p = 1000
b = c(rep(1,5),rep(0,p-5))
data <- dgp(t,p,b)
b.init <- rep(0,p);
b.init[ sample(1:p,4) ] <- 1;
dfo.algo(data, b.init, 4 )
dfo.algo(data, b.init, 5 )
library(MASS)
t = 100
p = 1000
b = c(rep(1,5),rep(0,p-5))
data <- dgp(t,p,b)
b.init <- rep(0,p);
# b.init[ sample(1:p,4) ] <- 1;
dfo.algo(data, b.init, 5 )
b.init = c(1,rep(0,p-1))
dfo.algo(data, b.init, 5 )
b.init = c(1,1,1,rep(0,p-3))
dfo.algo(data, b.init, 5 )
install.packages('c:\gurobi702\win64\R\gurobi_7.0-2.zip', repos=NULL)
getwd()
install.packages('c:/gurobi702/win64/R/gurobi_7.0-2.zip', repos=NULL)
library("gurobi")
install.packages("slam")
library("gurobi")
library(MASS)
library("SparseM")
library("Matrix")
library("gurobi")
source('C:/Users/Zhan/Dropbox/Research/L0 regularization/Simulation/discrete-first-order-algo.R')
source('C:/Users/Zhan/Dropbox/Research/L0 regularization/Simulation/gurobi-opt.R')
t = 100
p = 60
k = 5;
b = c(rep(1,k),rep(0,p-k))
data <- dgp(t,p,b,co=1)
b.init <- rep(0,p)
b0 <- dfo.algo(data, b.init, k )
b0
gurobi.opt(data, k, b0, tau=2)
load("C:/Users/Zhan/Dropbox/Research/lasso-type-estimator/REL/Result.RData")
view(B)
View(B)
library(expm)
Sigma <- sqrtm( matrix( c(0.25, 0.15, 0.15, 0.15, 0.25, 0, 0.15, 0, 0.25), 3, 3 ) );
Sigma
Sigma %*% Sigma
source('C:/Users/Zhan/Dropbox/Research/L0 regularization/Simulation/tools.R')
source('C:/Users/Zhan/Dropbox/Research/L0 regularization/Simulation/csr.R')
t <- 100; p <- 8; b <- c(rep(1,4),rep(0,4));
data <- dgp(t, p, b,co=1);
library("MASS")
library("SparseM")
library("Matrix")
library("gurobi")
t <- 100; p <- 8; b <- c(rep(1,4),rep(0,4));
data <- dgp(t, p, b,co=1);
g(X, y, L) %=% data;
csr(y, X, 4)
csr(y, X, 3)
csr(y, X, 5)
csr(y, X, 2)
t <- 100; p <- 15; b <- c(rep(1,4),rep(0,4));
data <- dgp(t, p, b,co=1); g(X, y, L) %=% data;
t <- 100; p <- 15; b <- c(rep(1,4),rep(0,11));
data <- dgp(t, p, b,co=1); g(X, y, L) %=% data;
csr(y, X, 4)
source('C:/Users/Zhan/Dropbox/Research/L0 regularization/Simulation/csr.R')
source('C:/Users/Zhan/Dropbox/Research/L0 regularization/Simulation/csr.R')
csr(y, X, 4)
choose(15,4)
t <- 100; p <- 20; b <- c(rep(1,10),rep(0,10));
data <- dgp(t, p, b,co=1); g(X, y, L) %=% data;
csr(y, X, 10)
csr.largeK(y, X, 10, 0.25, 5000, 100)
K <- ncol(X); n.k <- choose(K,k);
if( k > K ) noquote("Error: k is larger than K.");
k=10
K <- ncol(X); n.k <- choose(K,k);
if( k > K ) noquote("Error: k is larger than K.");
n.k
C <- a*n.k; sp <- sample(1:n.k, C, replace = FALSE);
a = 0.25
C <- a*n.k; sp <- sample(1:n.k, C, replace = FALSE);
pred.set <- combn(K, k); B <- matrix(0, K, C);
C.upper = 5000
C <- C.upper; sp <- sample(1:n.k, C, replace = FALSE);
pred.set <- combn(K, k); B <- matrix(0, K, C);
C
for( j in 1:length(sp) ){
i <- sp(j); ind <- pred.set[ , i]; X.select <- X[ , ind];
b.hat <- solve( t(X.select) %*% X.select ) %*% t(X.select) %*% y;
B[ind, j] <- b.hat;
}
sp
length( sp )
1:length()
1:length(sp)
csr.largeK(y, X, 10, 0.25, 5000, 100)
source('C:/Users/Zhan/Dropbox/Research/L0 regularization/Simulation/csr.R')
csr.largeK(y, X, 10, 0.25, 5000, 100)
source('C:/Users/Zhan/Dropbox/Research/L0 regularization/Simulation/csr.R')
csr(y, X, 10)
t <- 100; p <- 50; b <- c(rep(1,5),rep(0,45));
data <- dgp(t, p, b,co=1); g(X, y, L) %=% data;
choose(50,4)
choose(50,25)
csr.largeK(y, X, 25, 0.25, 5000, 100)
combn(10.2)
combn(10,2)
sp <- sample(1:choose(50,25), 5000, replace = FALSE);
sp <- sample(1:choose(50,25), 1, replace = FALSE);
a <- 1:choose(50,25)
standardize
help(standardize)
library("devtools")
library(devtools)
choose(20,10)
r <- 1:choose(20,10)
r <- 1:choose(15,8)
r <- 6425*4
r <- 1:( 6425*4 )
r
MM <- sample(r, 5000, replace =  FALSE)
predict.set = combn(15,8)
predict.set = combn(20,10)
test <- function(x){
if(x > 3) return(3*x);
y <- x^3; return(y)
}
test(1)
test(4)
predict.set = combn(30,15)
predict.set = combn(25,13)
rm(predict.set)
predict.set = combn(25,13)
choose(24,12)
predict.set = combn(24,12)
predict.set = combn(20,10)
install.packages("Surrogate")
runif(1)
runif(2)
25 * runif(1)
rr <- 25 * runif(1)
rrr
rr
round(rr)
round(13.1)
round(13.7)
sample(0:25, 1)
sample(0:25, 1)
sample(0:25, 1)
sample(0:25, 1)
sample(0:25, 1)
sample(0:25, 1)
sample(0:25, 1)
sample(0:25, 1)
sample(0:25, 1)
sample(0:25, 1)
sample(0:25, 1)
round(13.7)
round(13.7)
sample(0:25, 1)
round(13.7)
sample(0:25, 1)
round(13.7)
sample(0:25, 1)
sample(0:25, 1)
sample(0:25, 1)
sample(0:25, 1)
sample(0:25, 1)
sample(0:25, 1)
sample(0:25, 1)
sample(0:25, 1)
round(13.7)
sample(0:25, 1)
round(13.7)
sample(0:25, 1)
sample(0:25, 1)
sample(0:25, 1)
sample(0:25, 1)
sample(0:25, 1)
sample(0:25, 1)
sample(0:25, 1)
sample(0:25, 1)
sample(0:25, 1)
sample(0:25, 1)
sample(0:25, 1)
sample(0:25, 1)
round(13.7)
round(13.7)
round(13.7)
round(13.7)
round(13.7)
round(13.7)
round(13.7)
sample(0:25, 1)
round(13.7)
round(13.7)
round(13.7)
round(13.7)
round(13.7)
round(13.7)
sample(1:1,1)
set.seed(100)
rnorm(1)
rnorm(1)
set.seed(100)
rnorm(1)
rnorm(1)
library(devtools)
install_github("anqif/cvxr")
library(devtools)
install_github(repo="ryantibs/best-subset", subdir="bestsubset")
options(devtools.install.args = "--no-multiarch")
install_github(repo="ryantibs/best-subset", subdir="bestsubset")
library(bestsubset)
library(Rcpp)
library(RcppEigen)
library(BH)
library(uuid)
install.packages("uuid")
library(uuid)
library(bitops)
install_github("anqif/cvxr")
library(bestsubset)
2^50
2^154
2^15
intToBits(5)
2^32
2^64
2^32
matrix( intToBits(5), 32, 1)
matrix( as.integer( intToBits(5) ), 32, 1)
as.integer( intToBits(12) )
help( expand.grid )
n = 3
expand.grid(rep(list(0:1),n))
expand.grid(rep(list(0:1),12))
class( expand.grid(rep(list(0:1),12)) )
A = expand.grid(rep(list(0:1),12));
A[2,]
class(A[2,])
as.matrix(A)
BB = as.matrix(A)
BB
class(BB)
load("C:/Users/Zhan/Desktop/pre_result.RData")
rsquare.csr = rsq(y.real, y.bar, y.hat.csr)
rsquare.enhance = rsq(y.real, y.bar, y.hat.enhance)
rsquare.all = rsq(y.real, y.bar, y.hat.all)
mpse.csr = MPSE(y.real, y.hat.csr)
mpse.enhance = MPSE(y.real, y.hat.enhance)
mpse.all = MPSE(y.real, y.hat.all)
cat( "rsquare.csr", "\n",
rsquare.csr, "\n",
"rsquare.all", "\n",
rsquare.all, "\n",
"rsquare.enhance", "\n",
rsquare.enhance, "\n",
"mpse.csr", "\n",
mpse.csr, "\n",
"mpse.all", "\n",
mpse.all, "\n",
"mpse.enhance", "\n",
mpse.enhance, "\n" )
plot(dates[outsample.start:outsample.end],y.real[,1],type = "l",col = "black", xlab = "Date",ylab = "ExReturn", lwd = 1.6)
plot(dates[outsample.start:outsample.end],y.real,type = "l",col = "black", xlab = "Date",ylab = "ExReturn", lwd = 1.6)
lines(dates[outsample.start:outsample.end],y.hat.enhance[,2],col = "green", lwd = 2)
lines(dates[outsample.start:outsample.end],y.hat.enhance[,3],col = "green", lwd = 2)
lines(dates[outsample.start:outsample.end],y.hat.enhance[,1],col = "red", lwd = 2)
lines(dates[outsample.start:outsample.end],y.hat.enhance[,5],col = "red", lwd = 2)
lines(dates[outsample.start:outsample.end],y.hat.enhance[,5],col = "blue", lwd = 2)
lines(dates[outsample.start:outsample.end],y.hat.enhance[,6],col = "blue", lwd = 2)
lines(dates[outsample.start:outsample.end],y.hat.enhance[,6],col = "cyan", lwd = 2)
lines(dates[outsample.start:outsample.end],y.hat.enhance[,12],col = "cyan", lwd = 2)
plot(dates[outsample.start:outsample.end],y.real,type = "l",col = "black", xlab = "Date",ylab = "ExReturn", lwd = 1.6)
lines(dates[outsample.start:outsample.end],y.hat.all,col = "blue", lwd = 1.6)
lines(dates[outsample.start:outsample.end],y.hat.enhance[,1],col = "cyan", lwd = 2)
plot(dates[outsample.start:outsample.end],y.real,type = "l",col = "black", xlab = "Date",ylab = "ExReturn", lwd = 1.6)
lines(dates[outsample.start:outsample.end],y.hat.all,col = "blue", lwd = 1.6)
lines(dates[outsample.start:outsample.end],y.hat.enhance[,4],col = "cyan", lwd = 2)
lines(dates[outsample.start:outsample.end],y.hat.enhance[,4],col = "cyan", lwd = 2)
b
plot(dates[outsample.start:outsample.end],y.real,type = "l",col = "black", xlab = "Date",ylab = "ExReturn", lwd = 1.6)
lines(dates[outsample.start:outsample.end],y.hat.enhance[,1],col = "cyan", lwd = 2)
lines(dates[outsample.start:outsample.end],y.hat.enhance[,1],col = "blue", lwd = 2)
lines(dates[outsample.start:outsample.end],y.hat.enhance[,6],col = "red", lwd = 2)
lines(dates[outsample.start:outsample.end],y.hat.enhance[,10],col = "yellow", lwd = 2)
lines(dates[outsample.start:outsample.end],y.hat.enhance[,3],col = "cyan", lwd = 2)
lines(dates[outsample.start:outsample.end],y.hat.enhance[,2],col = "grey", lwd = 2)
help(dnorm)
pnorm(10)
pnorm(1.96)
pnorm(-0.08, sd = 0.2)
load("C:/Users/Zhan/Dropbox/Research/best-subset/application/US stock return/pre_result.RData")
g(rsquare.csr, mpse.csr) %=% list( rsq(y.real, y.bar, y.hat.csr), MPSE(y.real, y.hat.csr) )
g(rsquare.bs, mpse.bs) %=% list( rsq(y.real, y.bar, y.hat.bs), MPSE(y.real, y.hat.bs) )
g(rsquare.l2, mpse.l2) %=% list( rsq(y.real, y.bar, y.hat.l2), MPSE(y.real, y.hat.l2) )
g(rsquare.l2.all, mpse.l2.all) %=% list( rsq(y.real, y.bar, y.hat.l2.all), MPSE(y.real, y.hat.l2.all) )
g(rsquare.csr, mpse.csr) %=% list( rsq(y.real, y.bar, y.hat.csr), MPSE(y.real, y.hat.csr) )
g(rsquare.l2, mpse.l2) %=% list( rsq(y.real, y.bar, y.hat.l2), MPSE(y.real, y.hat.l2) )
g(rsquare.l2.all, mpse.l2.all) %=% list( rsq(y.real, y.bar, y.hat.l2.all), MPSE(y.real, y.hat.l2.all) )
rsquare.l2.k = matrix(0,K,J)
mpse.l2.k = matrix(0,K,J)
for(j in 1:J){
g(rsquare.l2.k[,j], mpse.l2.k[,j]) %=% list( rsq(y.real, y.bar, y.hat.l2.k[,,j]), MPSE(y.real, y.hat.l2.k[,,j]) )
}
result.csr = data.frame(mpse.csr, rsquare.csr)
write.csv(result, "mpse_R2_new.csv")
write.csv(result.csr, "mpse_R2_new.csv")
getwd()
result.l2 = data.frame(mpse.l2, rsquare.l2, mpse.l2.all, rsquare.l2.all)
write.csv(result.l2, "mpse_R2_new.csv", append = TRUE)
help("write.csv")
write.table(result.csr, "mpse_R2_new.csv")
cbind(mpse.l2.k, rsquare.l2.k)
result.l2.k = data.frame(cbind(mpse.l2.k, rsquare.l2.k))
result.l2.k
result.csr = data.frame(mpse.csr, rsquare.csr)
write.csv(result.csr, "mpse_R2_csr.csv")
result.l2 = data.frame(mpse.l2, rsquare.l2, mpse.l2.all, rsquare.l2.all)
write.csv(result.l2, "mpse_R2_l2.csv")
result.l2.k = data.frame(cbind(mpse.l2.k, rsquare.l2.k))
write.csv(result.l2.k, "mpse_R2_l2_k.csv")
sqrt(log(12)/100)
sqrt(log(12)/180)
sqrt(log(12)/200)
sqrt(log(12)/256)
sqrt(log(12)/80)
A = matrix(rnorm(200),50,4)
A
list(A)
B = list(A)
B
seq_len(10)
lapply(seq_len(4), function(i) X[A,1])
lapply(seq_len(4), function(i) A[,1])
load("C:/Users/Zhan/Dropbox/Research/lasso-type-estimator/C-Lasso/PGMM_endo/Result_old.RData")
print("mosek result:")
print( report(correct.ratio, se.record, Rep) )
print( sum(time.record))
library(bestsubset)
n = 200
p = 20
x1 = rnorm(n*5) * 10;
x2 = runif(n*10, 0, 5)
x3 = rpois(n*5, 4)
X = matrix( c( x1, x2, x3 ), nrow = n, ncol = p )
beta = as.matrix( c(rep(1,4), rep(0,16)) )
e = as.matrix( rnorm(n) )
y = X %*% beta + e
library(devtools)
install_github("anqif/cvxr")
library("cvxr")
setwd("C:/Users/Zhan/Dropbox/Research/lasso-type-estimator/C-Lasso/PLS_static")
source('C:/Users/Zhan/Dropbox/Research/lasso-type-estimator/C-Lasso/PLS_static/master_static.R')
correct.ratio[1,1,1]
correct.ratio[1,1,2]
se.record[1,1,1]
se.record[1,1,2]
